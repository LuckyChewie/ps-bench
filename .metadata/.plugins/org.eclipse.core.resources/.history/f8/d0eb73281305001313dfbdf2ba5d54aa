package pubsub;

import siena.Filter;
import siena.Notifiable;
import siena.Notification;
import siena.Op;
import siena.SienaException;
import siena.ThinClient;
import siena.comm.InvalidSenderException;
import java.util.StringTokenizer;

public class SienaPubSubEngine implements PubSubEngine{
	
	private ThinClient SienaClient;
	private String ClientID;
	private String BrokerID;
	private Filter AdvFilter;
	private Notifiable Subscriber;
	
	public int start(String ClientID, String BrokerID) {
		this.ClientID = ClientID;
		this.BrokerID = BrokerID;
		
		return 0;
	}

	public int connect(String host, int port) {
		try {
			SienaClient = new ThinClient (host,ClientID);
		} catch (InvalidSenderException e) {
			e.printStackTrace();
		}

		return 0;
	}
	
	public Filter addConstraint (String predicates){
		
		StringTokenizer strtok = new StringTokenizer(predicates,",");
		
		while(strtok.hasMoreElements()){
			String key = strtok.nextToken().replace("[","").replace("]","");
			//System.out.println("Key: " + key);
			
			String operator = strtok.nextToken().replace("[","").replace("]","");
			//System.out.println("Op: " + operator);
			
			String value = strtok.nextToken().replace("[","").replace("]","");
			//System.out.println("Value: " + value);
			
				AdvFilter = new Filter();
				
				if(operator.equals("eq"))
					AdvFilter.addConstraint(key, Op.EQ, value);
				else if (operator.equals("<"))
					AdvFilter.addConstraint(key, Op.LT, value);
				else if (operator.equals(">"))
					AdvFilter.addConstraint(key, Op.GT, value);
				else if (operator.equals("<="))
					AdvFilter.addConstraint(key, Op.LE, value);
				else if (operator.equals(">="))
					AdvFilter.addConstraint(key, Op.GE, value);
		}
		
		System.out.println("success");
		return AdvFilter;
	}

	public int advertise(String predicates) {
		
		//AdvFilter.clear();
		AdvFilter = addConstraint (predicates);
		
		try {
			SienaClient.advertise(AdvFilter, ClientID);
		} catch (SienaException e) {
			e.printStackTrace();
		}
		
		return 0;
	}

	public int unadvertise(int id) {
		
		return 0;
	}

	public void subscribe(String predicates) {
		AdvFilter.clear();
		AdvFilter = addConstraint (predicates);
		
		try {
			SienaClient.subscribe(AdvFilter, Subscriber);
		} catch (SienaException e) {
			e.printStackTrace();
		}
	}

	public int unsubscribe(int id) {
		return 0;
	}

	public int publish(String predicates) {
		
		Notification n = new Notification();
		 
		StringTokenizer strtok = new StringTokenizer(predicates,",");
		
		while(strtok.hasMoreElements()){			
			String key = strtok.nextToken().replace("[","").replace("]","");
			String value = strtok.nextToken().replace("[","").replace("]","");
			n.putAttribute(key, value);
		}
			
		 try {
			SienaClient.publish(n);
		} catch (SienaException e) {
			e.printStackTrace();
		}
		    
		 return 0;
	}
	
	public static void main (String args[]){
		SienaPubSubEngine SienaPubSub = new SienaPubSubEngine();
		SienaPubSubEngine SienaPubSub2 = new SienaPubSubEngine();
		
		SienaPubSub2.subscribe("[class,eq,'temp'],[area,eq,'tor'],[value,<,0]");
		SienaPubSub.start("client2", "server1");
		SienaPubSub.connect("ka:localhost:1100",0);
		
		SienaPubSub.start("client1", "server1");
		SienaPubSub.connect("ka:localhost:1100",0);
		//SienaPubSub.advertise("[class,eq,'temp'],[area,eq,'tor'],[value,<,100]");
		SienaPubSub.publish("[class,'temp'],[area,'tor'],[value,-10]");	
	}

	public int registerListener() {
		// TODO Auto-generated method stub
		return 0;
	}


	public int disconnect() {
		// TODO Auto-generated method stub
		return 0;
	}

	public int stop() {
		// TODO Auto-generated method stub
		return 0;
	}

}
