package reader;

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import pubsub.InvalidEngineException;
import pubsub.PubSubEngine;
import pubsub.PubSubFactory;

public class Client {
	
	private PubSubEngine engine;
	private BufferedReader reader;
	private String host;
	private String ClientID;
	private String BrokerID;
	private int port;
	private long elapsedTime;
	private DateFormat dateFormat;
	private String engineType;
	
	public Client(String type, String log, String host, int port, String ClientID, String BrokerID) throws InvalidEngineException, FileNotFoundException{
		
		reader = new BufferedReader(new FileReader(log));
		
		engine = PubSubFactory.createPubSubEngine(type);
		
		this.host = host;
		this.port = port;
		
		engineType = type;
		dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		
		this.ClientID = ClientID;
		this.BrokerID = BrokerID;
	}
	
	public void start(){
		engine.start(ClientID,BrokerID);
		engine.stop();
		
		engine.connect(host, port);

		String line = null;
		
		try {
			line = reader.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		FileWriter ExecutionLogs = null;
		String log;
		
		try {
			ExecutionLogs = new FileWriter(engineType + ClientID + "Log.csv",true);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		while(line != null){
			Scanner scan = new Scanner(line);
			int sleep;
			
			if(scan.hasNext())
				sleep = scan.nextInt();
			else
				break;
			
			try {				
				System.out.println("Sleeping..." + sleep);
				Thread.sleep(sleep);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			String command = scan.next();
			String args = scan.nextLine().replaceFirst("\\s","");
				
			if(command.equals("p")){
					long startTime = System.nanoTime();
					engine.publish(args);
					elapsedTime = startTime - System.nanoTime();
					
					log = dateFormat.format(new Date()) + ",Publication," + host + ":"+ port + ",\"" +
					args + "\"," + engineType + "," + (TimeUnit.MILISECONDS.convert(elapsedTime, TimeUnit.NANOSECONDS))+"ns\n";
					
					try {
						ExecutionLogs.append(log);
						ExecutionLogs.flush();
					} catch (IOException e1) {
						e1.printStackTrace();
					}		
			}
					
			else if (command.equals("a")){
		 			startTime = System.nanoTime();
					engine.advertise(args);
					endTime = System.nanoTime();
					
					log = dateFormat.format(new Date()) + ",Advertisement," + host + ":"+ port + ",\"" +
					args + "\"," + engineType + "," + (endTime-startTime)+"ns\n";
					
					try {
						ExecutionLogs.append(log);
						ExecutionLogs.flush();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
			}
			
			else if (command.equals("ua")){
					startTime = System.nanoTime();
					engine.unadvertise(Integer.parseInt(args));
					endTime = System.nanoTime();
					
					log = dateFormat.format(new Date()) + ",Unadvertisement," + host + ":"+ port + ",\"" +
					args + "\"," + engineType + "," + (endTime-startTime)+"ns\n";
					
					try {
						ExecutionLogs.append(log);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
			}
					
			else if (command.equals("s")){
					startTime = System.nanoTime();
					engine.subscribe(args);
					endTime = System.nanoTime();
					
					log = dateFormat.format(new Date()) + ",Subscription," + host + ":"+ port + ",\"" +
					args + "\"," + engineType + "," + (endTime-startTime)+"ns\n";
					
					try {
						ExecutionLogs.append(log);
						ExecutionLogs.flush();
					} catch (IOException e1) {
						e1.printStackTrace();
					}			
			}
			
			else if (command.equals("ua")){
					startTime = System.nanoTime();
					engine.unsubscribe(Integer.parseInt(args));
					endTime = System.nanoTime();
					
					log = dateFormat.format(new Date()) + ",Unsubscription," + host + ":"+ port + ",\"" +
					args + "\"," + engineType + "," + (endTime-startTime)+"ns\n";
					
					try {
						ExecutionLogs.append(log);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					
			}
			
			else{
					System.err.println("Unrecognized command");
			}
			
			scan.close();
			
			try {
				line = reader.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}	
		}
		System.out.println("File finished. Listening for incoming publications.");
		
		try {
			reader.close();
			ExecutionLogs.close();
			while(true){
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				//keep running until manually shutdown through shell kill all command	
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
